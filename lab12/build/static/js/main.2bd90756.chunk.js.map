{"version":3,"sources":["init-fcm.js","App.js","register-sw.js","index.js"],"names":["firebase","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","messaging","onMessage","payload","console","log","noteTitle","notification","title","noteOptions","body","icon","Notification","onclick","event","click_action","length","window","open","this","close","err","usePublicVapidKey","serverkey","compose","withState","lifecycle","componentDidMount","_componentDidMount","Object","asyncToGenerator","regenerator_default","a","mark","_callee2","setToken","wrap","_context2","prev","next","props","requestPermission","then","_callee","token","_context","getToken","sent","stop","catch","apply","arguments","_ref","react_default","createElement","Fragment","JSON","stringify","to","bodyParameter","navigator","serviceWorker","register","registration","scope","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.2bd90756.chunk.js","sourcesContent":["import * as firebase from \"firebase/app\";\nimport \"firebase/messaging\";\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyCzNWovyoyuUtCfpslY3G8RqszKx6sAfzQ\",\n  authDomain: \"react-sec02-046.firebaseapp.com\",\n  projectId: \"react-sec02-046\",\n  storageBucket: \"react-sec02-046.appspot.com\",\n  messagingSenderId: \"512788552350\",\n  appId: \"1:512788552350:web:0408dc1afb7b2a7dadf98f\"\n});\n\nlet messaging = firebase.messaging();\n\nmessaging.onMessage(function (payload) {\n  try {  //try???\n    console.log('Message received. ', payload);\n\n    const noteTitle = payload.notification.title;\n    const noteOptions = {\n      body: payload.notification.body,\n      icon: \"typewriter.jpg\", //this is my image in my public folder\n    };\n\n    console.log(\"title \", noteTitle, \" \", payload.notification.body);\n    //var notification = //examples include this, seems not needed\n\n    new Notification(noteTitle, noteOptions).onclick = function (event) {\n      // console.log(event);\n      // console.log(payload.notification.click_action);\n      if(payload && payload.notification &&  payload.notification.click_action &&  payload.notification.click_action.length > 0)\n      {\n        window.open(payload.notification.click_action, '_blank');\n      }\n      this.close();\n    };\n  }\n  catch (err) {\n    console.log('Caught error: ', err);\n  }\n});\n\nmessaging.usePublicVapidKey(\n  \"BEwsgVafoTXZ7QCdgnAAuVipsgkqSA1EGVQomfhisLdBMazflSBtxdDPL9G_vVN8QXWQZFujWxdenk_FMWe25rU\"\n);\n\nexport { messaging };\n","import React from \"react\";\nimport { messaging } from \"./init-fcm\";\nimport { compose, lifecycle, withState } from \"recompose\";\n\nconst serverkey = \"AAAAd2SUWp4:APA91bGEIN5DQ-aNCa1C4aVsM17-e5wwII32n1Ayoapu80BgL66z7jpv-3RK4ZGQcraxsqeicZKYxs0GdbkCmt73MNOJqZnIk9gkXpdkxla4Xx6IOer_faxk6l4LtT_4axn8cgnLzEhL\";\nfunction bodyParameter(token) {\n  const collection = {\n    \"notification\": {\n      \"title\": \"Firebase 1\",\n      \"body\": \"Firebase is awesome\",\n      \"click_action\": \"http://localhost:3000/\",\n      \"icon\": \"http://url-to-an-icon/icon.png\"\n    },\n    \"to\": token\n  };\n  return collection;\n};\n\nconst App = ({ token }) => (\n  <>\n    <h1>React + Firebase Cloud Messaging (Push Notifications)</h1>\n    <div>\n      API/Server key: <p>{serverkey}</p>\n    </div>\n    <div>\n      Current token is: <p>{token}</p>\n    </div>\n    <div>\n      Postman Details : \n      <ul>\n        <li><b>Endpoint:</b> https://fcm.googleapis.com/fcm/send</li>\n        <li><b>Method:</b> POST</li>\n        <li><b>Header:</b> <br /> 1. Authorization : <b>key={serverkey}</b> <br />\n        2.Content-Type : <b>application/json</b></li>\n        <li><b>Body Parameter:</b><br /><b></b><div><pre>{JSON.stringify(bodyParameter(token), null, 2) }</pre></div></li>\n      </ul>\n    </div>\n  </>\n);\n\nexport default compose(\n  withState(\"token\", \"setToken\", \"\"),\n  lifecycle({\n    async componentDidMount() {\n      const { setToken } = this.props;\n      messaging\n        .requestPermission()\n        .then(async function() {\n          const token = await messaging.getToken();\n          setToken(token);\n        })\n        .catch(function(err) {\n          console.log(\"Unable to get permission to notify.\", err);\n        });\n    }\n  })\n)(App);","const registerServiceWorker = () => {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker\n      .register(\"./firebase-messaging-sw.js\")\n      .then(function(registration) {\n        console.log(\"Registration successful, scope is:\", registration.scope);\n      })\n      .catch(function(err) {\n        console.log(\"Service worker registration failed, error:\", err);\n      });\n  }\n};\n\nexport { registerServiceWorker };","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { registerServiceWorker } from \"./register-sw\";\nimport App from \"./App\";\n\nregisterServiceWorker();\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}